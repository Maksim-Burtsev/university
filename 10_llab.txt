domains
name, number = string
file = f
  gr	 = symbol
  grlist = gr*
  d = integer
database
phone(name, number)
road(gr,gr,d)
predicates
  nondeterm connected(gr,gr,d)
clauses
  connected(X,Y,Dist):-
	road(X,Y,Dist).
  connected(X,Y,Dist):-
	road(Y,X,Dist).
predicates
  determ member(gr,grlist)
clauses
  member(X,[X|_]):-!.
  member(X,[_|L]):-
	member(X,L).
 

predicates
  nondeterm route(gr,gr,grList,grList,d)
clauses
  route(Gr,Gr,VisitedGrs, VisitedGrs, 0) :-
	!.
  route(Gr1,Gr2,VisitedGrs,ResultVisitedGrs,Distance):-
	connected(Gr1,X,Dist1),
	not(member(X,VisitedGrs)),
	route(X,Gr2,[X|VisitedGrs],ResultVisitedGrs,Dist2),
	Distance=Dist1+Dist2.


predicates
  procedure showAllRoutes(gr,gr)-(i,i)
  procedure write_rote(gr FirstGr,grList,d)
  procedure reverse_list(grList InList, grList Tmp, grList Reversed)

clauses
  showAllRoutes(Gr1,Gr2):-
	write(Gr1," to ",Gr2," are:\n"),
	route(Gr1,Gr2, [Gr1] ,VisitedGrs, Dist),
	write_rote(Gr1,VisitedGrs,Dist),nl,
	fail.
  showAllRoutes(_,_).

  write_rote(Gr1,[Gr1|VisitedGrs],Dist):-
	!,
	Grs = [Gr1|VisitedGrs],
	write("  ",Grs," --> ",Dist),nl.
  write_rote(_,VisitedGrs,Dist):-
	reverse_list(VisitedGrs, [], VisitedGrs_Reversed),
	write("  ",VisitedGrs_Reversed," --> ",Dist),nl.

  reverse_List([],LIST,LIST):-!.
  reverse_List([H|SeenListRest],Interm,SeenList):-
	reverse_List(SeenListRest,[H|Interm],SeenList).
	
 

predicates
  procedure showShortestRoutes(gr,gr)-(i,i)
  determ shorterRouteExist(gr,gr,d)-(i,i,i)
 
clauses
  showShortestRoutes(Gr1,Gr2):-
	write("The shortest road from ", Gr1," to ",Gr2," is:\n"),
	route(Gr1,Gr2, [Gr1] ,VisitedGrs, Dist),
	not(shorterRouteExist(Gr1,Gr2,Dist)),
	write_rote(Gr1,VisitedGrs,Dist),nl,
	fail.
  showShortestRoutes(_,_).
 
  shorterRouteExist(Gr1,Gr2,Dist):-
	route(Gr1,Gr2, [Gr1] ,_, Dist1),
	Dist1<Dist,!.

predicates
name_phone(name, number).
phone_name(name, number).
m(char).
menu.
start.
clauses
name_phone(Name, Phone) :-
	phone(Name, Phone),!.
	name_phone(_,"Nothing to be found").
phone_name(Name,Phone) :-
	phone(Name, Phone),!.
	phone_name("Nothing to be found",_).

menu :-
	%clearwindow,
	write("1 - Add new road\n"),
	write("2 - Remove the city and all its roads\n"),
	write("3 - Delete road with lenght\n"),
	write("4 - Show shortest road from A to B\n"),
	write("5 - Show all roads from A to B\n"),
	write("6 - Delete road between A and B\n"),
	write("0 - Exit\n"),
	readchar(C),m(C).



m('1') :-
	%clearwindow,
	write("Enter name of fist city:\n"),
	readln(G1),
	write("Enter name of second city:\n"),
	readln(G2),
	write("Lenght between them (integer):\n"),
	readint(L),
	assert(road(G1, G2, L)),	
	menu,!.

m('2') :-
	%clearwindow,
	write("Enter name of city that should be deleted\n"),
	readln(G1),
	retractall(road(_,G1, _)),
	retractall(road(G1,_, _)),
	menu,!.

m('3') :-
	%clearwindow,
	write("Enter lenght (int) between cities that should be deleted\n"),
	readint(L),
	retract(road(_,_, L)),
	menu,!.
m('4') :-
	%clearwindow,
	write("Enter name of fist city:\n"),
	readln(G1),
	write("Enter name of second city:\n"),
	readln(G2),
	showShortestRoutes(G1, G2),menu,!.
	
m('5') :-
	%clearwindow,
	write("Enter name of fist city:\n"),
	readln(G1),
	write("Enter name of second city:\n"),
	readln(G2),
	showAllRoutes(G1, G2),menu,!.
m('6') :-
	%clearwindow,
	write("Enter name of fist city:\n"),
	readln(G1),
	write("Enter name of second city:\n"),
	readln(G2),
	retract(road(G1,G2, _)),
	menu,!.

m('0') :-
	save("cities.ddb"),
	retractall(_),!.
m(_) :-
	menu.
start :-
	existfile("cities.ddb"),!,
	consult("cities.ddb"),menu.
start :-
	openwrite(f,"cities.ddb"),
	closefile(f),menu.
goal
start.
